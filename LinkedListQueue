//首先先实现一下队列接口
public interface Queue<E>{
    void getSize();
    boolean isEmpty();
    void enqueue(E e);
    E dequeue();
    E getFront();
}
//在底层使用链表实现队列
public class LinkedListQueue<E> implements Queue<E>{
	private class Node{
		private E e;
		private Node next;
		
		public Node(E e,Node node){
			this.e = e;
			this.next = next;
		}
		public Node(E e){
			this.e = e;
			this.next = null;
		}
		public Node(){
			e = null;
			next = null;
		}
		
		@Vverride
		public String toString(){
			return e.toString();
		}
	}
	
	private Node head,tail;
	private int size;
	public class LinkedListQueue(){
		head = null;
		tail = null;
		size = 0;
	}
	
	@override 
	public int getSize(){
		return size;
	}
	
	@Override
	public boolean isEmpty(){
		return size == 0;
	}
	
	@Override
	public void enqueue(E e){
		if(tail == null){
			tail = new Node(e);
			head = tail;
		}else{
			tail.next = new Node(e);
			tail = tail.next;
		}
		size ++;
	}
	
	@Override
	public E dequeue(){
		if(isEmpty()){
			throw new IllegalArgumentException("Dequeue failed, queue is empty);
		}
		Node retNode = head;
		head = head.next;
		reNode.next = null;
		if(head == null){
			tail = null;
		}
		size --;
	}
	
	@Override
	public E getFront(){
		if(isEmpty()){
			throw new IllegalArgumentException("GetFront failed,queue is empty");
		}
		return head.e;
	}
	
	@Override
	public String toString(){
		StringBuffer res = new StringBuffer();
		res.append("LinkedListQueue front")
		res.append("[ ");
		
		Node cur = head;
		while(cur != null){
			res.append(cur + "-->");
			cur = cur.next;
		}
		res.append("NULL tail" );
		return res.toString();
	}
} 
